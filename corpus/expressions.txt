============================================
Assigment expression
============================================

x = 10;
y = 11.0;
z = "what";
w = z;

---

(source_file
  (assignment_expression
    left: (identifier)
    right: (integer_literal))
  (assignment_expression
    left: (identifier)
    right: (float_literal))
  (assignment_expression
    left: (identifier)
    right: (string_literal))
  (assignment_expression
    left: (identifier)
    right: (identifier)))

============================================
Compound Assigment expression
============================================

x += 1;
y -= 11.1;
z *= w;
a /= 7;
b %= 2;
c &= 0b001100;
d |= 0xABABAB;
e ^= 0o777;
f <<= 1;
g >>= 2;
h +%= x;
i -%= 1;
j *%= 2;

---

(source_file
  (compound_assignment_expr
    left: (identifier)
    operator: (assignment_operator)
    right: (integer_literal))
  (compound_assignment_expr
    left: (identifier)
    operator: (assignment_operator)
    right: (float_literal))
  (compound_assignment_expr
    left: (identifier)
    operator: (assignment_operator)
    right: (identifier))
  (compound_assignment_expr
    left: (identifier)
    operator: (assignment_operator)
    right: (integer_literal))
  (compound_assignment_expr
    left: (identifier)
    operator: (assignment_operator)
    right: (integer_literal))
  (compound_assignment_expr
    left: (identifier)
    operator: (assignment_operator)
    right: (integer_literal))
  (compound_assignment_expr
    left: (identifier)
    operator: (assignment_operator)
    right: (integer_literal))
  (compound_assignment_expr
    left: (identifier)
    operator: (assignment_operator)
    right: (integer_literal))
  (compound_assignment_expr
    left: (identifier)
    operator: (assignment_operator)
    right: (integer_literal))
  (compound_assignment_expr
    left: (identifier)
    operator: (assignment_operator)
    right: (integer_literal))
  (compound_assignment_expr
    left: (identifier)
    operator: (assignment_operator)
    right: (identifier))
  (compound_assignment_expr
    left: (identifier)
    operator: (assignment_operator)
    right: (integer_literal))
  (compound_assignment_expr
    left: (identifier)
    operator: (assignment_operator)
    right: (integer_literal)))

============================================
Unary expression
============================================

!x;
~true;
-%10;
-11.9;

---

(source_file
  (unary_expression
    operator: (unary_operator)
    expression: (identifier))
  (unary_expression
    operator: (unary_operator)
    expression: (boolean_literal))
  (unary_expression
    operator: (unary_operator)
    expression: (integer_literal))
  (unary_expression
    operator: (unary_operator)
    expression: (float_literal)))

============================================
Binary expression
============================================

1 + 2;
x +% 10;
11.1 - 0.1;
y -% z;
2 * n;
2 *% m;
x / t;
10 % 2;
1 << 2;
3 >> 4;
true & false;
false | true;
right ^ left;
error1 || error2;
a orelse b;
x and y;
boy or girl;
vec1 ++ vec2;
vec1 ** vec3;

a == b;
10 != 11;
1.0 < 2.0;
x <= 1;
10 > y;
x >= 2;

---

(source_file
  (binary_expression
    left: (integer_literal)
    operator: (binary_operator)
    right: (integer_literal))
  (binary_expression
    left: (identifier)
    operator: (binary_operator)
    right: (integer_literal))
  (binary_expression
    left: (float_literal)
    operator: (binary_operator)
    right: (float_literal))
  (binary_expression
    left: (identifier)
    operator: (binary_operator)
    right: (identifier))
  (binary_expression
    left: (integer_literal)
    operator: (binary_operator)
    right: (identifier))
  (binary_expression
    left: (integer_literal)
    operator: (binary_operator)
    right: (identifier))
  (binary_expression
    left: (identifier)
    operator: (binary_operator)
    right: (identifier))
  (binary_expression
    left: (integer_literal)
    operator: (binary_operator)
    right: (integer_literal))
  (binary_expression
    left: (integer_literal)
    operator: (binary_operator)
    right: (integer_literal))
  (binary_expression
    left: (integer_literal)
    operator: (binary_operator)
    right: (integer_literal))
  (binary_expression
    left: (boolean_literal)
    operator: (binary_operator)
    right: (boolean_literal))
  (binary_expression
    left: (boolean_literal)
    operator: (binary_operator)
    right: (boolean_literal))
  (binary_expression
    left: (identifier)
    operator: (binary_operator)
    right: (identifier))
  (binary_expression
    left: (identifier)
    operator: (binary_operator)
    right: (identifier))
  (binary_expression
    left: (identifier)
    operator: (binary_operator)
    right: (identifier))
  (binary_expression
    left: (identifier)
    operator: (binary_operator)
    right: (identifier))
  (binary_expression
    left: (identifier)
    operator: (binary_operator)
    right: (identifier))
  (binary_expression
    left: (identifier)
    operator: (binary_operator)
    right: (identifier))
  (binary_expression
    left: (identifier)
    operator: (binary_operator)
    right: (identifier))
  (binary_expression
    left: (identifier)
    operator: (binary_operator)
    right: (identifier))
  (binary_expression
    left: (integer_literal)
    operator: (binary_operator)
    right: (integer_literal))
  (binary_expression
    left: (float_literal)
    operator: (binary_operator)
    right: (float_literal))
  (binary_expression
    left: (identifier)
    operator: (binary_operator)
    right: (integer_literal))
  (binary_expression
    left: (integer_literal)
    operator: (binary_operator)
    right: (identifier))
  (binary_expression
    left: (identifier)
    operator: (binary_operator)
    right: (integer_literal)))


============================================
Complex unary/binary expression
============================================

a == b and a > 10;
!a and b;
!a and b > 10;

---

(source_file
  (binary_expression
    left: (binary_expression
      left: (identifier)
      operator: (binary_operator)
      right: (identifier))
    operator: (binary_operator)
    right: (binary_expression
      left: (identifier)
      operator: (binary_operator)
      right: (integer_literal)))
  (binary_expression
    left: (unary_expression
      operator: (unary_operator)
      expression: (identifier))
    operator: (binary_operator)
    right: (identifier))
  (binary_expression
    left: (unary_expression
      operator: (unary_operator)
      expression: (identifier))
    operator: (binary_operator)
    right: (binary_expression
      left: (identifier)
      operator: (binary_operator)
      right: (integer_literal))))

============================================
Type expression
============================================

usize;
f64;

?i32;
?Point;

[]u8;
[_]u8;
[4]u8;
[*]u8;
[]align(16) u8;

*i32;
*allowzero i32;
*volatile i32;
*const Point;
*align(16) i32;

[]?u32;
?[]u32;
*[]u32;
[]*u32;

?*Point;
*?Point;

---

(source_file
  (primitive_type)
  (primitive_type)
  (unary_expression
    operator: (unary_operator)
    expression: (primitive_type))
  (unary_expression
    operator: (unary_operator)
    expression: (identifier))
  (array_type
    (primitive_type))
  (array_type
    size: (identifier)
    (primitive_type))
  (array_type
    size: (integer_literal)
    (primitive_type))
  (array_type
    size: (pointer)
    (primitive_type))
  (array_type
    (type_prefix
      (integer_literal))
    (primitive_type))
  (pointer_type
    (primitive_type))
  (pointer_type
    (type_prefix)
    (primitive_type))
  (pointer_type
    (type_prefix)
    (primitive_type))
  (pointer_type
    (type_prefix)
    (identifier))
  (pointer_type
    (type_prefix
      (integer_literal))
    (primitive_type))
  (array_type
    (optional_type
      (primitive_type)))
  (unary_expression
    operator: (unary_operator)
    expression: (array_type
      (primitive_type)))
  (pointer_type
    (array_type
      (primitive_type)))
  (array_type
    (pointer_type
      (primitive_type)))
  (unary_expression
    operator: (unary_operator)
    expression: (pointer_type
      (identifier)))
  (pointer_type
    (optional_type
      (identifier))))

============================================
Reference and deference expression
============================================

&a;

a.*;

---

(source_file
  (reference_expression
    value: (identifier))
  (dereference_expression
    value: (identifier)))

============================================
Block expression
============================================

{};

{
  var x = 10;
};

{
  var x = 10;
  x
};

---

(source_file
  (block)
  (block
    (assignment_statement
      name: (identifier)
      expression: (integer_literal)))
  (block
    (assignment_statement
      name: (identifier)
      expression: (integer_literal))
    (identifier)))

============================================
Comptime Block expression
============================================

comptime {};

comptime {
  var x = 10;
};

comptime {
  var x = 10;
  x
};

---

(source_file
  (comptime_block
    (block))
  (comptime_block
    (block
      (assignment_statement
        name: (identifier)
        expression: (integer_literal))))
  (comptime_block
    (block
      (assignment_statement
        name: (identifier)
        expression: (integer_literal))
      (identifier))))

============================================
Array expression
============================================

[_]u8{};

[4]u32{1, 2, 3, 4};

[_][_]u64{
    [_]u64{1, 2, 3, 4},
    [_]u64{5, 6, 7, 8},
};

---

(source_file
  (array_expression
    size: (identifier)
    type: (primitive_type)
    values: (array_values))
  (array_expression
    size: (integer_literal)
    type: (primitive_type)
    values: (array_values
      (integer_literal)
      (integer_literal)
      (integer_literal)
      (integer_literal)))
  (array_expression
    size: (identifier)
    size: (identifier)
    type: (primitive_type)
    values: (array_values
      (array_expression
        size: (identifier)
        type: (primitive_type)
        values: (array_values
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal)))
      (array_expression
        size: (identifier)
        type: (primitive_type)
        values: (array_values
          (integer_literal)
          (integer_literal)
          (integer_literal)
          (integer_literal))))))

============================================
Anonymous Array expression
============================================

.{};

.{1, 2, 3, 4};

.{
    .{1, 2, 3, 4},
    .{5, 6, 7, 8},
};

---

(source_file
  (anonymous_array_expr)
  (anonymous_array_expr
    values: (array_values
      (integer_literal))
    values: (array_values
      (integer_literal)
      (integer_literal)
      (integer_literal)))
  (anonymous_array_expr
    values: (array_values
      (anonymous_array_expr
        values: (array_values
          (integer_literal))
        values: (array_values
          (integer_literal)
          (integer_literal)
          (integer_literal))))
    values: (array_values
      (anonymous_array_expr
        values: (array_values
          (integer_literal))
        values: (array_values
          (integer_literal)
          (integer_literal)
          (integer_literal))))
    values: (array_values)))
